难点就在于如何找出滑动窗口内的最大值
❌This solution has time limit exceeded
class Solution:
    def maxSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        ans = []

        if len(nums) == 1:
            return nums

        for i in range(0, len(nums) - k + 1):
            j = i + k - 1
            ans.append(max(nums[i:j+1]))
  # since here we actually iterated twice in i and max (这个滑动窗口很费时间)
        return ans
        
!!!✅Correct Solution
class Solution:
    def maxSlidingWindow(nums, k):
        output = []
        q = collections.deque() # index
        l = r = 0
        
        while r < len(nums):
            # pop smaller values from q
            while q and nums[q[-1]] < nums[r]:
                q.pop()
            q.append(r)
            
            # remove left val from window
            # l是新的sliding window的左边，q[0]是目前最大值的index，
            # 所以如果l大于了目前的最大数的index，就得把这个数给pop出去
            if l > q[0]:
                q.popleft()
                
            if (r + 1) >= k:
                output.append(nums[q[0]])
                l += 1
            r += 1
        return output
