class Solution:
    def minWindow(self, s: str, t: str) -> str:
        # 首先决定t里需要哪些char
        need = collections.defaultdict(int)
        for c in t:
            need[c] += 1
        needCnt = len(t)

        i = 0
        res = (0, float('inf'))

        for j,c in enumerate(s):
            if need[c] > 0:
                needCnt -= 1
            need[c] -= 1
            # 先把需要的都扫进来
            if needCnt == 0:
                while True:
                    c = s[i]
                    # 如果window的第一个是我们需要的就退出
                    if need[c] == 0:
                        break
                    # 不是需要的就右移一个 不要目前的
                    need[c] += 1
                    i += 1
                # j 是window的末尾，记录答案
                if j - i < res[1] - res[0]:
                    res = (i,j)
                # 接下来右移头指针 进行下一个window
                need[s[i]] += 1
                needCnt += 1
                i += 1
        return '' if res[1] > len(s) else s[res[0] : res[1]+1] 
        #如果res始终没被更新过，代表无满足条件的结果
